#!/bin/bash

set -e

if [ -f .env ]; then
    set -o allexport
    source .env
    set +o allexport
fi

g_script_name=$(basename $0)
g_script_dir=$(dirname $0)
g_script_dir=$(cd $g_script_dir; pwd)

g_database=
g_schema=sample
g_schema_template=$g_script_dir/sample.sql
g_host=$(dnsdomainname -A)
g_user=
g_port=5433
g_sample_count=10
g_folder=$g_script_dir/initdb.d
g_timestamp=$(date +'%Y%m%d_%H%M%S')
g_dump_format=csv

if [ -f ~/vault/.default.sead.server ]; then
    g_host=`cat ~/vault/.default.sead.server`
fi

if [ -f ~/vault/.default.sead.username ]; then
    g_user=`cat  ~/vault/.default.sead.username`
fi

function usage()
{
    local error_message=$1
    if [ "$error_message" != "" ]; then
        echo "[$g_timestamp]: $error_message" >&2
    fi
    echo "usage: create-sample [OPTIONS...] DBNAME"
    echo "Creates a sample of the database."
    echo "Options:"
    echo "   --host HOSTNAME            host name"
    echo "   --user USERNAME            user name"
    echo "   --port PORT                host port "
    echo "   --folder FOLDER            output folder name"
    echo "   --sample-count COUNT       size of each sample group (default: 10)"
    echo "   --database DBNAME          database name"
    echo "   --format FORMAT            dump format (default: csv)"
    exit 64
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --sample-count|-c)
            g_sample_count="$2"; shift 2;
        ;;
        --database|-d)
            g_database="$2"; shift 2;
        ;;
        --port|-p)
            g_port="$2"; shift 2;
        ;;
        --user|-U)
            g_user="$2"; shift 2;
        ;;
        --host|-h)
            g_host="$2"; shift 2;
        ;;
        --format|-f)
            g_dump_format="$2"; shift 2;
            if [ "$g_dump_format" != "csv" ] && [ "$g_dump_format" != "insert" ]; then
                usage "[$g_timestamp]: Unknown format $g_dump_format"
            fi
        ;;
        --*)
            usage "[$g_timestamp]: Unknown option $1"
        ;;
        *)
            POSITIONAL+=("$1")
            shift
        ;;
    esac
done

set -- "${POSITIONAL[@]}"

g_database=$1

if [ "$g_database" == "" ]; then
    usage
fi


function execute_sql_file()
{
    local tmp_file=$(mktemp)
    local sql_file=$1
    if [ ! -f $sql_file ]; then
        echo "[$g_timestamp]: File $sql_file not found" >&2
        exit 1
    fi
    psql --file=$sql_file --dbname=$g_database --username=$g_user --host=$g_host --port=$g_port >& $tmp_file
    echo "[$g_timestamp]: Successfully executed SQL file $sql_file" >&2
    rm -f $tmp_file
}

function execute_sql()
{
    local sql=$1
    psql -h $g_host -U $g_user -d $g_database -p $g_port -tAc "$sql"
}

function drop_schema()
{
    local schema=$1
    execute_sql "drop schema if exists $schema cascade;" >& /dev/null
}

g_credentials="--username=$g_user --host=$g_host --port=$g_port --dbname=$g_database"

g_common_opts="--format p --no-tablespaces --no-owner --no-privileges --no-comments $g_credentials --blobs"

function dump_data()
{
    rm -f $g_folder/*.sql

    # 1) schema-only dumps

    pg_dump $g_common_opts --schema=public --schema-only       > $g_folder/00-public.sql
    pg_dump $g_common_opts --schema=sead_utility --schema-only > $g_folder/01-utility.sql
    pg_dump $g_common_opts --schema=facet --inserts            > $g_folder/02-facet.sql

    # 2) create dump_sample and copy its data and fill it with data from pubic schema

    drop_schema "dump_sample"
    echo "create schema dump_sample;"                          > $g_folder/_materialize_data.sql

    for view in $(psql $g_credentials -t -c "select table_name from information_schema.views where table_schema='sample';")
    do
        echo "create table dump_sample.$view as select * from sample.$view;" >> $g_folder/_materialize_data.sql
    done

    execute_sql_file "$g_folder/_materialize_data.sql"
    execute_sql "select drop_columns_by_pattern('dump_sample', array['date_updated', '%uuid', 'age_range']);"

    # 3) dump each public table subset (in schema dump_sample) as CSV or inserts

    # FIXME Do I need to create postgis extension?
    if [ "$g_dump_format" == "csv" ]; then
        mkdir -p $g_folder/csv
        for table in $(psql $g_credentials -t -c "
            select table_name
            from information_schema.tables
            where table_schema='dump_sample'
              and table_name like 'tbl_%';")
        do
            psql $g_credentials --quiet -t -c "copy dump_sample.$table to stdout with csv header;" > $g_folder/csv/$table.csv
            if [ $(tail -n +2 "$g_folder/csv/$table.csv" | wc -l) -eq 0 ]; then
                rm "$g_folder/csv/$table.csv"
                echo "File $g_folder/csv/$table.csv was removed because it has no data rows."
            fi
        done
        echo "[$g_timestamp]: Successfully exported data to CSV files." >&2
    else
        echo "begin;"                                                                              > $g_folder/09-data.sql
        echo "set constraints all deferred;"                                                      >> $g_folder/09-data.sql
        pg_dump $g_common_opts --schema=dump_sample --data-only --column-inserts --inserts        >> $g_folder/09-data.sql
        echo "commit;"                                                                            >> $g_folder/09-data.sql
    fi

    rm -f $g_folder/_materialize_data.sql

    if [ -f $g_folder/09-data.sql ]; then
        sed -i 's/dump_sample\./public./g' $g_folder/09-data.sql
        sed -i 's/DEFERRABLE//i' $g_folder/09-data.sql
    fi

    sed -i 's/DEFERRABLE//i' $g_folder/00-public.sql
    sed -i -E 's/(\sREFERENCES\s+[^(;]*\([^)]*\)([^;]*)?)\s*;/\1 DEFERRABLE;/I' $g_folder/00-public.sql
    sed -i 's/uuid DEFAULT public.uuid_generate_v4() NOT NULL/text null/g' $g_folder/00-public.sql
    sed -i 's/uuid DEFAULT public.uuid_generate_v4() NOT NULL/text null/g' $g_folder/01-utility.sql
    sed -i 's/CREATE SCHEMA public;//g' $g_folder/00-public.sql
}


drop_schema "sample"
execute_sql_file "$g_schema_template"

dump_data

echo "[$g_timestamp]: Sample database $g_database dumped to $g_folder"

