#!/bin/bash

set -e

if [ -f .env ]; then
    set -o allexport
    source .env
    set +o allexport
fi

g_script_name=$(basename $0)
g_script_dir=$(dirname $0)
g_script_dir=$(cd $g_script_dir; pwd)

g_database=
g_schema=sample
g_schema_template=$g_script_dir/sample.sql
g_host=$(dnsdomainname -A)
g_user=
g_port=5433
g_sample_count=10
g_folder=$g_script_dir/initdb.d
g_timestamp=$(date +'%Y%m%d_%H%M%S')
g_dump_format=csv
g_fixed_ids_file=

if [ -f ~/vault/.default.sead.server ]; then
    g_host=`cat ~/vault/.default.sead.server`
fi

if [ -f ~/vault/.default.sead.username ]; then
    g_user=`cat  ~/vault/.default.sead.username`
fi

function usage()
{
    local error_message=$1
    if [ "$error_message" != "" ]; then
        echo "[$g_timestamp]: $error_message" >&2
    fi
    echo "usage: create-sample [OPTIONS...] DBNAME"
    echo "Creates a sample of the database."
    echo "Options:"
    echo "   --host HOSTNAME            host name or IP address (default: $g_host)"
    echo "   --user USERNAME            user name (default: $g_user)"
    echo "   --port PORT                host port (default: $g_port)"
    echo "   --sample-count COUNT       size of each sample group (default: $g_sample_count)"
    echo "   --database DBNAME          database name"
    echo "   --format FORMAT            dump format (default: csv)"
    echo "   --fixed-ids FILENAME       Filename with fixed sample ids (default: NONE - random ids)"
    echo "   --folder FOLDER            output folder name (default: $g_folder)"
    echo "   --help                     show this help message"
    exit 64
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --sample-count|-c)
            g_sample_count="$2"; shift 2;
        ;;
        --database|-d)
            g_database="$2"; shift 2;
        ;;
        --port|-p)
            g_port="$2"; shift 2;
        ;;
        --user|-U)
            g_user="$2"; shift 2;
        ;;
        --host|-h)
            g_host="$2"; shift 2;
        ;;
        --format|-f)
            g_dump_format="$2"; shift 2;
            if [ "$g_dump_format" != "csv" ] && [ "$g_dump_format" != "insert" ]; then
                usage "[$g_timestamp]: Unknown format $g_dump_format"
            fi
        ;;
        --fixed-ids)
            g_fixed_ids_file="$2"; shift 2;
        ;;
        --*)
            usage "[$g_timestamp]: Unknown option $1"
        ;;
        *)
            POSITIONAL+=("$1")
            shift
        ;;
    esac
done

set -- "${POSITIONAL[@]}"

g_database=$1

if [ "$g_database" == "" ]; then
    usage
fi

function execute_sql_file()
{
    local tmp_file=$(mktemp)
    local sql_file=$1
    if [ ! -f $sql_file ]; then
        echo "[$g_timestamp]: File $sql_file not found" >&2
        exit 1
    fi
    psql --file=$sql_file --dbname=$g_database --username=$g_user --host=$g_host --port=$g_port >& $tmp_file
    echo "[$g_timestamp]: Successfully executed SQL file $sql_file" >&2
    rm -f $tmp_file
}

function execute_sql()
{
    local sql=$1
    set +e
    local tmp_file=$(mktemp)
    local result=$(psql --username=$g_user --host=$g_host --port=$g_port --dbname=$g_database -tAc "$sql")
    local rc=$?
    if [ $rc -ne 0 ]; then
        echo "[$g_timestamp]: error executing SQL: $sql"
        echo "$result" 
        rm -f $tmp_file
        exit 1
    fi
    rm -f $tmp_file
    set -e
}

function drop_schema()
{
    local schema=$1
    execute_sql "drop schema if exists $schema cascade;" > /dev/null 2>&1
}

g_credentials="--username=$g_user --host=$g_host --port=$g_port --dbname=$g_database"

g_common_opts="--format p --no-tablespaces --no-owner --no-privileges --no-comments $g_credentials --blobs"

function dump_schema_to_csv()
{
    local schema="$1"
    local target="$2"
    local pattern="$3"
    local filter=""
    if [ "$pattern" != "" ]; then
        filter="and table_name like '$pattern'"
    fi
    rm -rf $g_folder/csv/$schema
    mkdir -p $g_folder/csv/$schema

    for table in $(psql $g_credentials -t -c "
        select table_name
        from information_schema.tables
        where TRUE
          and table_schema = '$schema' 
          and table_type = 'BASE TABLE'
          $filter;")
    do
        psql $g_credentials --quiet -t -c "copy (select * from $schema.$table order by 1) to stdout with csv header;" > $g_folder/csv/$schema/$table.csv

        if [ $(tail -n +2 "$g_folder/csv/$schema/$table.csv" | wc -l) -eq 0 ]; then
            rm "$g_folder/csv/$schema/$table.csv"
        fi
    done

    if [ "$target" != "" ]; then
        rm -rf $g_folder/csv/$target
        mv $g_folder/csv/$schema $g_folder/csv/$target
    fi
    echo "[$g_timestamp]: Successfully exported $schema data to CSV files." >&2

}

function dump_schema_to_sql()
{
    local schema="$1"
    local target_file="$2"
    echo "begin;"                                                                   > $target_file
    echo "set constraints all deferred;"                                           >> $target_file
    pg_dump $g_common_opts --schema=$schema --data-only --column-inserts --inserts >> $target_file
    echo "commit;"                                                                 >> $target_file
}

function create_subset_schema_script()
{
    local target_file="$1"

    drop_schema "dump_sample"

    echo "-- THIS IS A TEMPORARY SCRIPT  GENERATED BY create-sample SCRIPT"      > $target_file
    echo "create schema dump_sample;"                                           >> $target_file

    if [ "$g_fixed_ids_file" != "" ]; then
        if [ ! -f $g_fixed_ids_file ]; then
            echo "[$g_timestamp]: file $g_fixed_ids_file not found" >&2
            exit 1
        fi
        echo "\\copy sample.physical_samples_fixture from stdin with (format csv, header true);" >> $target_file 
        cat "${g_fixed_ids_file}"                                               >> $target_file
        echo ""                                                                 >> $target_file 
        echo "\\."                                                              >> $target_file 
    else
        echo "insert into sample.physical_samples_fixture (physical_sample_id)" >> $target_file   
        echo "   select distinct physical_sample_id "                           >> $target_file    
        echo "   from sample.sample_per_datatype(5);"                           >> $target_file    
    fi;
    echo ""                                                                     >> $target_file 

    for view in $(psql $g_credentials -t -c "select table_name from information_schema.views where table_schema='sample';")
    do
        echo "create table dump_sample.$view as select * from sample.$view;" >> $target_file
    done
}

function dump_data()
{
    rm -rf $g_folder/*.sql $g_folder/csv

    # schema-only dumps
    pg_dump $g_common_opts --schema=public --schema-only       > $g_folder/00-public.sql
    pg_dump $g_common_opts --schema=sead_utility --schema-only > $g_folder/01-utility.sql
    pg_dump $g_common_opts --schema=facet --schema-only        > $g_folder/02-facet-schema.sql

    # create subset schema (with views) named "sample"
    drop_schema "dump_sample"

    # create subset schema (with actual table data) named "dump_sample"
    create_subset_schema_script "$g_script_dir/materialize_data.sql"
    execute_sql_file "$g_script_dir/materialize_data.sql"
    execute_sql "select sample.drop_columns_by_pattern('dump_sample', array['date_updated', '%uuid', 'age_range']);"

    # copy out data from the dump_sample and facet schema
    if [ "$g_dump_format" == "csv" ]; then
        dump_schema_to_csv "dump_sample" "public" "tbl_%"
        dump_schema_to_csv "facet"
    else
        dump_schema_to_sql "dump_sample" "$g_folder/09-data.sql"
        dump_schema_to_sql "facet" "$g_folder/10-facet-data.sql"
    fi

    # rm -f $g_script_dir/materialize_data.sql

    if [ -f $g_folder/09-data.sql ]; then
        sed -i 's/dump_sample\./public./g' $g_folder/09-data.sql
    fi

    for filename in "$g_folder/00-public.sql" "$g_folder/02-facet-schema.sql"; do
        if [ -f $filename ]; then
            sed -i 's/DEFERRABLE//i' $filename
            sed -i -E 's/(\sREFERENCES\s+[^(;]*\([^)]+\)([^;]*)?)\s*;/\1 DEFERRABLE;/I' $filename
        fi
    done

    sed -i 's/uuid DEFAULT public.uuid_generate_v4() NOT NULL/text null/g' $g_folder/00-public.sql
    sed -i 's/uuid DEFAULT public.uuid_generate_v4() NOT NULL/text null/g' $g_folder/01-utility.sql
    sed -i 's/CREATE SCHEMA public;//g' $g_folder/00-public.sql
}

drop_schema "sample" > /dev/null 2>&1

execute_sql_file "$g_schema_template"

dump_data

echo "[$g_timestamp]: Sample database $g_database dumped to $g_folder"

