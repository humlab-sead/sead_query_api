<Playlist Version="1.0">
  <Add Test="SQT.Model.FacetConfig2Tests.ClearPicks_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.Model.FacetConfig2Tests.GetJoinTables_StateUnderTest_Success" />
  <Add Test="SQT.Model.FacetConfig2Tests.GetPickValues_WhenHasPicks_Success" />
  <Add Test="SQT.Model.FacetConfig2Tests.HasPicks_WhenDiscreteFacetHasPicks_IsTrue" />
  <Add Test="SQT.Model.FacetConfig2Tests.HasPicks_WhenFacetHasNoPicks_IsFalse" />
  <Add Test="SQT.Model.FacetConfig2Tests.HasPicks_WhenRangeFacetHasPicks_IsTrue" />
  <Add Test="SQT.Model.FacetConfigPickTests.CreateLowerUpper_LowerUpper_ListOfTwoPicks" />
  <Add Test="SQT.Model.FacetConfigPickTests.ToDecimal_WhenDecimalValue_ConvertedValue" />
  <Add Test="SQT.Model.FacetConfigPickTests.ToInt_DiscreteIntegerStringPick_ConvertedToCorrespondingInt" />
  <Add Test="SQT.Model.FacetGraphFactoryTests.Build_WhenSuccessfullyCalled_HasExpectedNodesAndEdges" />
  <Add Test="SQT.Model.FacetGroupTests.Find_FromRepository_IsComplete" />
  <Add Test="SQT.Model.FacetsConfig2Tests.ClearPicks_HasOrHasNotPicks_ExpectedBehavior" />
  <Add Test="SQT.Model.FacetsConfig2Tests.CollectUserPicks_VariousFacetsConfig_ExpectedBehavior" />
  <Add Test="SQT.Model.FacetsConfig2Tests.GetConfig_WhenConfigExists_ExpectedBehavior" />
  <Add Test="SQT.Model.FacetsConfig2Tests.GetConfigsThatAffectsTarget_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.Model.FacetsConfig2Tests.GetFacetCodes_VariousFacetsConfig_ExpectedBehavior" />
  <Add Test="SQT.Model.FacetsConfig2Tests.GetFacetConfigsWithPicks_VariousFacetsConfig_ExpectedBehavior" />
  <Add Test="SQT.Model.FacetsConfig2Tests.HasPicks_VariousFacetsConfig_ExpectedBehavior" />
  <Add Test="SQT.Model.FacetsConfig2Tests.Reconstitute_SingleFacetsConfigWithoutPicks_IsEqual" />
  <Add Test="SQT.Model.FacetsConfigSpecificationTests.IsSatisfiedBy_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.Model.FacetsConfigSpecificationTests.IsSatisfiedBy_WhenFaultyConfig_RaisesXception" />
  <Add Test="SQT.Model.FacetsGraphTests.Build_WhenResolvedByIoC_HasExpectedEdges" />
  <Add Test="SQT.Model.FacetsGraphTests.Find_WhenStartAndStopAreSwitched_ShouldBeReversedPath" />
  <Add Test="SQT.Model.FacetsGraphTests.Find_WhenStartAndStopsAreNeighbours_IsSingleStep" />
  <Add Test="SQT.Model.FacetsGraphTests.Find_WhenStartEqualsStop_ReturnsEmptyRoute" />
  <Add Test="SQT.Model.FacetsGraphTests.Find_WhenStartHasPathToStop_ShouldBeShortestPath" />
  <Add Test="SQT.Model.FacetsGraphTests.GetEdge_ByNodeId_WhenEdgeExists_ReturnsEdge" />
  <Add Test="SQT.Model.FacetsGraphTests.GetEdge_ByNodeNames_WhenEdgeExists_ReturnsEdge" />
  <Add Test="SQT.Model.FacetsGraphTests.TestMethod_UsingSqliteInMemoryProvider_Success" />
  <Add Test="SQT.Model.FacetsGraphTests.ToCSV_AnyState_ShouldBeStringOfDelimitedLines" />
  <Add Test="SQT.Model.FacetTests.AliasName_WhenFacetHasAlias_IsNotEmpty" />
  <Add Test="SQT.Model.FacetTests.AliasName_WhenFacetHasNoAlias_IsEmpty" />
  <Add Test="SQT.Model.FacetTests.ExtraTables_WhenFacetHasOnlyOneTable_IsEmpty" />
  <Add Test="SQT.Model.FacetTests.ExtraTables_WhenFacetHasTwoTable_IsSingle" />
  <Add Test="SQT.Model.FacetTests.Find_FromRepository_IsComplete" />
  <Add Test="SQT.Model.FacetTests.QueryCriteria_WhenFacetHasNoClause_IsEmpty" />
  <Add Test="SQT.Model.FacetTests.QueryCriteria_WhenFacetHasOneClause_IsSameAsClause" />
  <Add Test="SQT.Model.FacetTests.QueryCriteria_WhenFacetHasTwoClause_IsNotEmpty" />
  <Add Test="SQT.Model.GraphEdgeTests.Alias_OfAnyGraph_ReplacesNodeWithSameId" />
  <Add Test="SQT.Model.GraphEdgeTests.Clone_OfAnyEdge_HasSameState" />
  <Add Test="SQT.Model.GraphEdgeTests.Equals_OfIdenticalEdges_IsTrue" />
  <Add Test="SQT.Model.GraphEdgeTests.Reverse_OfAnyGraph_SwitchesNodes" />
  <Add Test="SQT.Model.GraphEdgeTests.ToStringPair_OfAnyEdge_ReturnsPair" />
  <Add Test="SQT.Model.GraphRouteTests.Contains_WhenAdded_EdgeExists" />
  <Add Test="SQT.Model.GraphRouteTests.Contains_WhenNotAdded_EdgeDoesNotExists" />
  <Add Test="SQT.Model.GraphRouteTests.ReduceBy_ExistingItem_ItemRemoved" />
  <Add Test="SQT.Model.GraphRouteTests.ToString_OfAnyGraph_ReturnsCsvString" />
  <Add Test="SQT.Model.GraphRouteTests.Trail_OfAnyGraph_ReturnListOfNodesNamesInTrail" />
  <Add Test="SQT.Model.ResultAggregateTests.GetFields_WithTwoFieldsField_ReturnsFields" />
  <Add Test="SQT.Model.ResultAggregateTests.GetResultFields_WithTwoFields_ReturnsTwoResultFields" />
  <Add Test="SQT.QueryBuilder.QuerySetupBuilderTests.Build_WithConcretePickCompilerAndVariousConfigs_GivesExpecteCriteriadCount" />
  <Add Test="SQT.QueryBuilder.QuerySetupBuilderTests.Build_WithVariousDomainConfigs_Success" />
  <Add Test="SQT.QueryBuilder.QuerySetupBuilderTests.SkitTest" />
  <Add Test="SQT.Infrastructure.Repository.FacetRepositoryTests.Children_FacetHasASingleChild_ReturnsThatChild" />
  <Add Test="SQT.Infrastructure.Repository.FacetRepositoryTests.FindThoseWithAlias_Success" />
  <Add Test="SQT.Infrastructure.Repository.FacetRepositoryTests.Get_ByFacetCode_Success" />
  <Add Test="SQT.Infrastructure.Repository.FacetTypeRepositoryTests.Find_WhenCalleWithExistingId_ReturnsType" />
  <Add Test="SQT.Infrastructure.Repository.NodeRepositoryTests.Find_WhenCalleWithExistingId_ReturnsType" />
  <Add Test="SQT.Infrastructure.Repository.RepositoryTests.GetAll_OnVariousRepositories_Success" />
  <Add Test="SQT.Infrastructure.Repository.RepositoryTests.Get_ExpectedBehavior" />
  <Add Test="SQT.Infrastructure.Repository.RepositoryTests.TestResolveUnitOfWork" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetAllFieldTypes_Called_ExpectedTypes" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetAllFieldTypes_Called_Success" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetAllFields_Called_SameAsDbSet" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetAllFields_Called_Success" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetAll_Called_CompleteAggregate" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetAll_Called_Success" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetByKey_Called_Success" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetByKeys_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetFieldsByKeys_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetViewType_Called_Success" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.GetViewTypes_Called_Success" />
  <Add Test="SQT.Infrastructure.Repository.ResultRepositoryTests.ToDictionary_Called_Success" />
  <Add Test="SQT.Infrastructure.Repository.ViewStateRepositoryTests.Find_WhenCalleWithExistingId_ReturnsType" />
  <Add Test="SQT.SqlCompilers.AvgFieldCompilerTests.Compile_Expression_Success" />
  <Add Test="SQT.SqlCompilers.CountFieldCompilerTests.Compile_Expression_Success" />
  <Add Test="SQT.SqlCompilers.DefaultFieldCompilerTests.Compile_Expression_Success" />
  <Add Test="SQT.SqlCompilers.DiscreteCategoryCountSqlCompilerTests.Compile_VariousConfigs_ExpectedBehavior" />
  <Add Test="SQT.SqlCompilers.DiscreteContentSqlCompilerTests.Compile_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.SqlCompilers.DiscreteFacetPickFilterCompilerTests.Compile_WhenHasPicksAndTargetAndCurrentFacetAreNotTheSame_ReturnsCriteria" />
  <Add Test="SQT.SqlCompilers.DiscreteFacetPickFilterCompilerTests.Compile_WhenNoPicks_ReturnsEmptyString" />
  <Add Test="SQT.SqlCompilers.DiscreteFacetPickFilterCompilerTests.Compile_WhenTargetAndCurrentFacetAreTheSame_ReturnsEmptyString" />
  <Add Test="SQT.SqlCompilers.JoinSqlCompilerTests.Compile_WithSingleEdgeWithWithoutAliasAndNoUdf_ReturnSingleJoinWithNoAlias" />
  <Add Test="SQT.SqlCompilers.JoinSqlCompilerTests.Compile_WithSingleEdge_ReturnSingleJoin" />
  <Add Test="SQT.SqlCompilers.MapResultSqlCompilerTests.Compile_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.SqlCompilers.RangeCategoryBoundSqlCompilerTests.Compile_RangeFacet_Success" />
  <Add Test="SQT.SqlCompilers.RangeCategoryCountSqlCompilerTests.Compile_VariousConfigs_ExpectedBehavior" />
  <Add Test="SQT.SqlCompilers.RangeFacetPickFilterCompilerTests.Compile_VariousConfigs_ExpectedBehavior" />
  <Add Test="SQT.SqlCompilers.RangeIntervalSqlCompilerTests.Compile_Interval_ContainsGenerateSeries" />
  <Add Test="SQT.SqlCompilers.RangeOuterBoundSqlCompilerTests.Compile_VariousConfigs_ExpectedBehavior" />
  <Add Test="SQT.SqlCompilers.SqlFieldCompilerTests.Compile_Expression_Success" />
  <Add Test="SQT.SqlCompilers.SumFieldCompilerTests.Compile_Expression_Success" />
  <Add Test="SQT.SqlCompilers.TemplateFieldCompilerTests.Compile_Expression_Success" />
  <Add Test="SQT.SqlCompilers.TextAggFieldCompilerTests.Compile_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.SqlCompilers.ValidPicksSqlQueryCompilerTests.Compile_VariousConfigs_ExpectedBehavior" />
  <Add Test="SQT.Infrastructure.CacheTests.Resolve_CanResolveCacheService" />
  <Add Test="SQT.Infrastructure.CacheTests.Set_WhenComplexValue_IsCached" />
  <Add Test="SQT.Infrastructure.CacheTests.Set_WhenSimple_IsCached" />
  <Add Test="SQT.Infrastructure.DependencyInjectionTests.CanResolveRegisteredDependencies" />
  <Add Test="SQT.Infrastructure.DependencyInjectionTests.CanResolveResultSqlCompilerLocator" />
  <Add Test="SQT.Infrastructure.DependencyInjectionTests.CannotResolveGeoDependency" />
  <Add Test="SQT.Infrastructure.DependencyInjectionTests.TestMemberInjection" />
  <Add Test="SQT.Infrastructure.DependencyInjectionTests.TestResolveDependent" />
  <Add Test="SQT.Infrastructure.DependencyInjectionTests.TestResolveService" />
  <Add Test="SQT.Infrastructure.DijkstrasGraphTests.TestDijkstras" />
  <Add Test="SQT.Infrastructure.DijkstrasGraphTests.add_vertex_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.Infrastructure.DijkstrasGraphTests.shortest_path_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.Infrastructure.FacetConfigReconstituteServiceTests.Reconstitute_OfSingleDiscreteFacetWithEnvelope_ReturnsExpectedResult" />
  <Add Test="SQT.Infrastructure.FacetConfigReconstituteServiceTests.Reconstitute_OfSingleDiscreteFacetWithoutEnvelope_ReturnsExpectedResult" />
  <Add Test="SQT.Infrastructure.FacetConfigReconstituteServiceTests.Reconstitute_OfSingleRangeFacetWithEnvelope_ReturnsExpectedResult" />
  <Add Test="SQT.Infrastructure.FacetConfigReconstituteServiceTests.Reconstitute_OfSingleRangeFacetWithoutEnvelope_ReturnsExpectedResult" />
  <Add Test="SQT.Infrastructure.FacetConfigReconstituteServiceTests.Reconstitute_UsingLowerCaseJsonFacetsConfig_ReturnsExpectedResult" />
  <Add Test="SQT.Infrastructure.FacetConfigReconstituteServiceTests.Reconstitute_UsingUpperCaseJsonFacetsConfig_ReturnsExpectedResult" />
  <Add Test="SQT.Infrastructure.FacetConfigReconstituteServiceTests.Reconstitute_WithoutTriggerCode_ReturnsExpectedResult" />
  <Add Test="SQT.Infrastructure.UtilityTests.InsertAt_EmptyList_ThrowsException" />
  <Add Test="SQT.Infrastructure.UtilityTests.InsertAt_Item_IsOk" />
  <Add Test="SQT.Infrastructure.UtilityTests.InsertAt_SingleItem_InsertsFirst" />
  <Add Test="SQT.QueryBuilder.ResultCompilers.ResultAggregateFieldExtensionTests.Any_Success" />
  <Add Test="SQT.QueryBuilder.ResultCompilers.ResultAggregateFieldExtensionTests.GetAggregateAliasedFields_Called_Success" />
  <Add Test="SQT.QueryBuilder.ResultCompilers.ResultAggregateFieldExtensionTests.GetAggregateColumnNameAliasPairs_Called_Success" />
  <Add Test="SQT.QueryBuilder.ResultCompilers.ResultAggregateFieldExtensionTests.GetAggregateCompiledDataFields_Called_Success" />
  <Add Test="SQT.QueryBuilder.ResultCompilers.ResultAggregateFieldExtensionTests.GetAggregateGroupByFields_Called_Success" />
  <Add Test="SQT.QueryBuilder.ResultCompilers.ResultAggregateFieldExtensionTests.GetAggregateInnerGroupByFields_Called_Success" />
  <Add Test="SQT.QueryBuilder.ResultCompilers.ResultAggregateFieldExtensionTests.GetAggregateSortFields_Called_Success" />
  <Add Test="SQT.QueryBuilder.ResultCompilers.TabularResultSqlCompilerTests.Compile_StateUnderTest_ExpectedBehavior" />
  <Add Test="SQT.Services.CategoryCountServiceTests.Load_UsingVariousConfigs_LoadsSuccessfully" />
  <Add Test="SQT.Services.DefaultResultServiceTests.Load_VariousConfigs_Success" />
  <Add Test="SQT.Services.DiscreteFacetContentServiceTests.Load_VariousDescreteFacets_Success" />
  <Add Test="SQT.Services.RangeCategoryCountServiceTests.Load_OfRangeCategoryCountsForVariousFacetsConfigs_ReturnsExpectedValues" />
  <Add Test="SQT.Services.RangeFacetContentServiceTests.Load_RangeFacetWithRangePick_IsLoaded" />
</Playlist>